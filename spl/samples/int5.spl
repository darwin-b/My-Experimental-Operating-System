//print("# In INT 5");


alias physicalSP S0;
alias sysCallno S1;
alias returnAdd S2;
alias counter S3;
alias childPID S4;
alias childPTBR S10;
alias valid S11;
alias j S12;
alias victim S13;
alias phypgno S7;
alias pg4 S9;
alias i S5;


physicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);
//sysCallno = physicalSP -1;
returnAdd = physicalSP -2;

counter=0;
while(counter<32) do
	if([READY_LIST +32*counter+ 1]==0) then
		childPID=counter;
		break;
	endif;  
	counter=counter+1;
endwhile;

if(counter>=32) then
 //	print("# no enough me");
	[returnAdd]=-1;
	ireturn;
endif;

[READY_LIST +32*childPID]=childPID;
childPTBR=1024+8*childPID;



pg4=-1;


i=24;

counter=3;

	while(i<64) do
		if([1280+i]==0) then
		    pg4=i;
                    break;
		endif;
         i=i+1;
        endwhile;

if(i>=64) then
// 	print("# no free page");

	counter=(childPID+1)%32;
	
	victim=-1;

	while(victim==-1) do
		j=1;
		
		while(j<6 && counter!=(PTBR-1024)/8) do
			if([1024 + 8*counter+j]=="11") then
				[1024 + 8*counter+j]="01";
			
			else
				if([1024 + 8*counter+j]== "01") then

					i=0;
					while(i<3) do
				if (( [1024 + 8*counter+j-1]==[PTBR+2*i] )&& (([PTBR+2*i+1]=="01") || ([PTBR+2*i+1]=="11")) ) then
							i=-1;
							break;
						endif;
						i=i+1;
					endwhile;
	
					if(i==-1) then
						break;
					endif;

					if([1280+[1024 + 8*counter+j-1]]<= 1) then						
						victim=1024 + 8*counter + j-1;
						[1280+[victim]]=0;
						
						break;
					endif;
				endif;
		
			endif;
			j=j+2;
		endwhile;

		counter=(counter+1)%32;
        endwhile;

	breakpoint;
	pg4=[victim];
	i=488;
	while(i<512) do
		if([6*512+ i]==0) then
			[6*512+i]=1;
			store([victim],i);
			[victim]=i;
			[victim +1]="00";
			break;
        	endif;
		i=i+1;
	endwhile;
	        
		if(i==512) then
			
			[physicalSP+1]=10;
			[physicalSP + 2]=0;
			SP=SP+2;			
			inline "JMP 11776";
	
		endif;
		store(6,20);

endif;



//.................................. changing Memory free list



[childPTBR +6]=pg4;
[childPTBR +7]="01";

[1280+ pg4]=1;

i=0;
    		while(i<512) do
                [512*pg4 +i]=[512*[PTBR +6]+i];
                i=i+1;
                endwhile;


//.......................
i=0;
while(i<6) do
	[childPTBR + i]=[PTBR + i ];
	i=i+1;
endwhile;



counter=0;
while(counter<=2) do
	valid=PTBR+2*counter+1;
	phypgno=[PTBR+2*counter];
	if([valid]=="01"||[valid]=="11") then
  		[1280+phypgno]=[1280+phypgno]+1;

	else
    		if(phypgno>=448)then
    	  		[6*512+phypgno]=[6*512+phypgno]+1;
    		endif;
	endif;

	counter=counter+1;
endwhile;


store(6,20);

//...................................


[READY_LIST +childPID*32 +5]=childPTBR;  //storing child ptbr in pcb 
[READY_LIST +childPID*32 +6]=PTLR;
[READY_LIST +childPID*32 +4]=[physicalSP];     //ip
[READY_LIST +childPID*32 +3]=SP-1;
[READY_LIST +childPID*32 +2]=BP;

[READY_LIST +childPID*32 +7]=R0;
[READY_LIST +childPID*32 +8]=R1;
[READY_LIST +childPID*32 +9]=R2;
[READY_LIST +childPID*32 +10]=R3;
[READY_LIST +childPID*32 +11]=R4;
[READY_LIST +childPID*32 +12]=R5;
[READY_LIST +childPID*32 +13]=R6;
[READY_LIST +childPID*32 +14]=R7;
[READY_LIST +childPID*32 +31]=(PTBR-1024)/8;

i=15;
while(i<31) do
	[READY_LIST +childPID*32 +i]=[READY_LIST +(PTBR-1024)*4 +i];
	i=i+1;
endwhile;

[READY_LIST +childPID*32 +1]=1;
[returnAdd]=childPID;

[([childPTBR + 2 * ((SP-1) / 512)] * 512) + ((SP-1) % 512) -1]=-2;

breakpoint;
ireturn;

