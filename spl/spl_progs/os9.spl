print "Hello" ;
alias counter S0 ;
alias temp S5;


//................exception handler......................

load(7,1) ;
load(8,2) ;  

//................loading interrupt 7........................

load(23,17);
load(24,18);

//................timer interrupt.............
load(9,3);
load(10,4);


//.................loading INIT program.............................
load(25,21);
load(26,22);
load(27,23);


load(5,19)  ;    			// loading FAT
load(6,20)	;				// loading Disk Free List

//................loading interrupt 1.............................
load(11,5) ;
load(12,6) ;

//...............loading interrupt 2...............................
load(13,7);
load(14,8);

//...............loading interrupt 3...............................
load(15,9);
load(16,10);

//...............loading interrupt 4...............................
load(17,11);
load(18,12);

//...............loading interrupt 5...............................
load(19,13);
load(20,14);

//...............loading interrupt 6...............................
load(21,15);
load(22,16);



//.................ready list.............................

PTBR = 1024  ;   				//sets PTBR physical address
PTLR = 4;

[READY_LIST + 0] = 0 ;   		// sets PID = 0
[READY_LIST + 1] = 2 ;    		// set process state as running 
[READY_LIST + 31] = 0; 			//init's parent id


SP = 3*512; 			//set sp`s logical address
BP = 3*512;				//setting BP 

//[28*512] = 0;       //setting top of INIT's stack to 0, so IP takes this.(not required)

				

//.................page table process 1(init process) ..............................

[PTBR + 0] = 25; 		//PHYSICAL page number for logical page 0 of processs
[PTBR + 1] = "01";		//setting auxillary info for logical page 0

[PTBR + 2] = 26;
[PTBR + 3] = "01";

[PTBR + 4] = 27;
[PTBR + 5] = "01";

[PTBR + 6] = 28;
[PTBR + 7] = "01";

			
counter = 0;
while ( counter <  128) do				   // 64 entries, each of size 2 words
	[ FILE_TABLE + counter + 0] = -1;	   // Set FAT Index to -1
	[ FILE_TABLE + counter + 1] =  0;	   // Set File Open Count to 0
	counter = counter + 2;				   
endwhile;

counter=0;
while(counter < 16) do
	[READY_LIST + 15 + counter] = -1;
	counter = counter + 1;
endwhile;


//....................seting up memory free list.................

counter=0;
while(counter <= 24) do
	[MEM_LIST + counter ] = 1;
	counter = counter +1;
endwhile;


[MEM_LIST + 25 ] = 1;
[MEM_LIST + 26 ] = 1;
[MEM_LIST + 27 ] = 1;
[MEM_LIST + 28 ] = 1;


counter = 0;
while(counter < 64) do
	if([MEM_LIST + counter ] != 1) then
		[MEM_LIST + counter ] = 0;
	endif;
	counter=counter +1;
endwhile;


//.....................setting state field in PCB to zero..........
counter=0;
while(counter < 32) do
	[READY_LIST + 1 + 32*counter] = 0;
	counter = counter + 1;
endwhile;

breakpoint;

print "Hello 1" ;
ireturn;
