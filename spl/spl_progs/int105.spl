print("# In INT 5");
alias physicalSP S0;
alias sysCallno S1;
alias returnAdd S2;
alias counter S3;
alias childPID S4;
alias childPTBR S10;
alias j S12;
alias victim S13;
alias phypgno S7;
alias pg4 S9;
alias i S5;
alias start S8;
alias PID S15;
alias RL S14;
alias parentPCB S11;
alias childPCB S6;

physicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);

counter=0;
while(counter<64) do
	if(counter<32) then
		RL=READY_LIST;
		if([RL +32*counter+ 1]==0) then
			childPID=counter;
			[READY_LIST +32*childPID]=childPID;
			childPTBR=1024+8*childPID;
			childPCB=READY_LIST+32*childPID;
			break;
		endif;
	else
		RL=62*512;
		if([RL +32*(counter-32)+ 1]==0) then
			childPID=counter;
			[32*512 +32*(childPID-32)]=childPID;
			childPTBR=61*512+8*(childPID-32);
			childPCB=62*512+32*(childPID-32);
			break;
		endif;
	endif;
	
	counter=counter+1;
endwhile;

breakpoint;
if(counter>=64) then
 	print("# no enough me");
	[returnAdd]=-1;
	ireturn;
endif;

print("k");

pg4=-1;


i=24;


breakpoint;
	while(i<61) do
		if([1280+i]==0) then
		    pg4=i;
                    break;
		endif;
         i=i+1;
        endwhile;

if(i>=61) then
 	print("# no free page");
breakpoint;
	counter=(childPID+1)%64;
	
	victim=-1;
	if(PTBR<1024+32*8) then
	       
		PID=(PTBR-1024)/8;
		parentPCB=READY_LIST+PID*32;
	else 
		
		PID=(PTBR-512*61)/8 +32;
		parentPCB=512*62+(PID-32)*32;
	endif;
	
	while(victim==-1) do
		j=1;
		
 		while(j<8 && counter!=PID) do
			

			if(counter<32) then
				start=1024+8*counter;
			else
				start=512*61+8*(counter-32);
			endif;


			if([start +j]=="11") then
				[start +j]="01";
                             breakpoint;
			
			endif;

				if([start +j]== "01") then
					
					//print("exp");
					//print [start +j-1];
					i=0;
					while(i<4) do
						if (( [start + j-1]==[PTBR+2*i] )&& (([PTBR+2*i+1]=="01") || ([PTBR+2*i+1]=="11")) ) then
							print([start+j-1]);								
							i=-1;
							break;
						endif;
						i=i+1;
					endwhile;
	
				

					if([1280+[start +j-1]]<= 1 &&i!=-1) then
						//print("hurr");						
						victim=start + j-1;
						[1280+[victim]]=0;
						break;
					endif;
				endif;
		
			j=j+2;

		endwhile;

		counter=(counter+1)%64;
        endwhile;

	
	pg4=[victim];
	i=348;
	while(i<512) do
		if([6*512+ i]==0) then
			[6*512+i]=1;
			store([victim],i);
			[victim]=i;
			[victim +1]="00";
			break;
        	endif;
		i=i+1;
	endwhile;
	        
		if(i==512) then
			[physicalSP-1]=10;
					
			inline "JMP 11776";
	
		endif;
		

endif;



//.................................. changing Memory free list


[childPTBR +6]=pg4;
[childPTBR +7]="11";

[1280+ pg4]=1;

i=0;
    		while(i<512) do
                [512*pg4 +i]=[512*[PTBR +6]+i];
                i=i+1;
                endwhile;


//.......................
i=0;
while(i<6) do
	[childPTBR + i]=[PTBR + i ];
	i=i+1;
endwhile;



counter=0;
while(counter<=2) do
	i=PTBR+2*counter+1;
	phypgno=[PTBR+2*counter];
	if([i]=="01"||[i]=="11") then
  		[1280+phypgno]=[1280+phypgno]+1;

	else
    		if(phypgno>=348)then
    	  		[6*512+phypgno]=[6*512+phypgno]+1;
    		endif;
	endif;

	counter=counter+1;
endwhile;



//...................................



	[childPCB +31]=PID;
[childPCB]=childPID;
        
	

[childPCB +5]=childPTBR;  //storing child ptbr in pcb 
[childPCB +6]=PTLR;
[childPCB +4]=[physicalSP];     //ip
[childPCB +3]=SP-1;
[childPCB +2]=BP;

[childPCB +7]=R0;
[childPCB +8]=R1;
[childPCB +9]=R2;
[childPCB +10]=R3;
[childPCB +11]=R4;
[childPCB +12]=R5;
[childPCB +13]=R6;
[childPCB +14]=R7;
store(6,20);

i=15;
breakpoint;

while(i<31) do
	[childPCB +i]=[parentPCB +i];
	i=i+1;
endwhile;

[childPCB +1]=1;
[returnAdd]=childPID;
[([childPTBR + 2 * ((SP-1) / 512)] * 512) + ((SP-1) % 512) -1]=-2;

ireturn;

