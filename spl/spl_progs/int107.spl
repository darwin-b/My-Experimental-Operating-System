print("Int 7");
breakpoint;
alias sysCallno S1;
alias physicalSP S0;
alias counter S6;
alias i S7;
alias newPCB S11;
alias argument S3;
alias returnAdd S4;
alias PCB S12;
alias fdloc S13;
alias flag S15;
alias RL S10;


flag=0;
if(PTBR>=61*512) then
	
	PCB=62*512 +((PTBR-61*512)/8 -32)*32;
else
		
	PCB=READY_LIST +(PTBR-1024)*4;
endif;

//print("1st");
//print([PCB]);

physicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);
sysCallno =physicalSP -1;
i=0;
if([sysCallno]==10) then

	flag=1;
	

print("jump");



	counter=([PCB] +1)%64 ;
	i=0;
	newPCB=-1;
	while(i<64) do
		if(counter<32) then

			if([READY_LIST + 32*counter +1]==1) then
				   newPCB=READY_LIST + 32*counter;
				//print("2nd");
				//print([newPCB]);
			  	break;
			endif;



		else
			counter=counter-32;
			if([62*512 + 32*counter +1]==1) then
				   newPCB=62*512 + 32*counter;
				//print("2nd");
				//print([newPCB]);

			  	break;
			endif;
 			counter=counter+32;
		endif;
	counter=(counter+1)%64;
	i=i+1;
	endwhile;

	if(i>=64) then
	halt;
	
	else


	 if(flag==1) then    
			
		i=0;
		while(i<8) do

			if([PCB+15+2*i]!=-1) then
		
				fdloc=PCB+15+2*i;
				[FILE_TABLE + 2*[fdloc] + 1]=[FILE_TABLE + 2*[fdloc]+1]-1;
	
				if([FILE_TABLE + 2*[fdloc]+1]==0)then
					[FILE_TABLE + 2*[fdloc]]=-1;
				endif;
	
				[fdloc]=-1;
				[fdloc + 1]=-1;

			endif;
	
			i=i+1;
		endwhile;

	  counter=0;
alias phypgno S8;
alias valid S9;

	while(counter<4) do
		valid=PTBR+2*counter+1;
		phypgno=[PTBR+2*counter];
		if([valid]=="01"||[valid]=="11") then
  			[1280+phypgno]=[1280+phypgno]-1;

		else
    			if(phypgno>=348)then
    	  			[6*512+phypgno]=[6*512+phypgno]-1;
    			endif;
		endif;
	[valid]="00";
	counter=counter+1;
	endwhile;



		[PCB +1]=0;

		
	
	else
	[PCB + 2]=BP;
	[PCB + 3]=SP-1;
	[PCB + 4]=[physicalSP];
	[PCB + 7]=R0;
	[PCB + 8]=R1;
	[PCB + 9]=R2;
	[PCB + 10]=R3;
	[PCB + 11]=R4;
	[PCB + 12]=R5;
	[PCB + 13]=R6;
	[PCB + 14]=R7;	

	endif;
	   
	

	[newPCB +1]=2;
	BP=[newPCB +2];
	SP=[newPCB +3];
 
        alias phyno S14;
	phyno=[newPCB +5]+6;
	i=PTBR+6;

        if([phyno]>347) then
                store([i],346);	
         	load([i],[phyno]);
		load(1,346);
		store(1,[phyno]);

		  [1280+[i]]=[1280+[i]]+1;
		 counter=[phyno];
        	  [phyno]=[i];
		  [phyno +1]="11";
                  [i]=counter;
		  [i+1]="00";		
	 endif; 

        PTBR= [newPCB +5];
	SP=SP+1;	
	
	[([PTBR + 2 * (SP / 512)] * 512) + (SP % 512)]=[newPCB +4];
	PTLR=[newPCB +6];

	R0=[newPCB + 7];
	R1=[newPCB + 8];
	R2=[newPCB + 9];
	R3=[newPCB + 10];
	R4=[newPCB + 11];
	R5=[newPCB + 12];
	R6=[newPCB + 13];
	R7=[newPCB + 14];
	
	

	endif;
store(6,20);
i=1000;
endif;

if([sysCallno]==13 &&i!=1000) then
        print("In Wait");
		i=0;
	returnAdd=physicalSP-2;
	argument=physicalSP-3;
        alias status S5;

	if([argument]<32)then
		status=[READY_LIST +32*[argument]+1];
	else
		status=[62*512 +32*([argument]-32)+1];
	endif;

	if(status==1) then
		[PCB+1]=100+[argument];
		[returnAdd]=0;
		inline "JMP 11872";
		 
	else
		//print("running/termi");
		[returnAdd]=-1;
	
	endif;

ireturn;
endif;


if([sysCallno]==10||[sysCallno]==14) then

i=0;
while(i<64) do
	if(i<32) then
		flag=READY_LIST + 32*i +1;
	else
		flag=62*512 + 32*(i-32) +1;
	endif;
 	
	if([flag]==100 +[PCB]) then
		[flag]=1;
	endif;
i=i+1;
endwhile;
[returnAdd]=0;
ireturn;

endif;

