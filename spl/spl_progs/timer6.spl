alias physical_sp S1;
alias current_pid S2;
alias new_pid S3;
alias current_pcb S4;
alias new_pcb S5;
alias counter S6;


current_pid = (PTBR-1024)/8 ;
current_pcb = (READY_LIST + 32*current_pid);
physical_sp = ([PTBR + 2*(SP/512)]*512) + (SP%512);

[current_pcb +1] = 1 ; 				//setting to ready state

[current_pcb +2] = BP;
[current_pcb +3] = SP - 1;
[current_pcb +4] = [physical_sp];   // setting ip in pcb from top of stack
[current_pcb +5] = PTBR;
[current_pcb +6] = PTLR;		
									// saving registers
[current_pcb +7] = R0;
[current_pcb +8] = R1;
[current_pcb +9] = R2;
[current_pcb +10] = R3;
[current_pcb +11] = R4;
[current_pcb +12] = R5;
[current_pcb +13] = R6;
[current_pcb +14] = R7;




//........................checking if pid = 31 .........................



if(current_pid==31) then
	new_pcb = 1536;
else
	new_pcb = current_pcb + 32;
endif;

counter = 0; 

//...........................round robin shceduling..........................


while(1) do
	if( [new_pcb + 1] == 1) then
		//print " pcb - ";
		//print new_pcb;
		break;
	endif;

	if( new_pcb>2559) then
		new_pcb = 1536;
	else
		new_pcb = new_pcb + 32;
	endif;
endwhile;


BP = [new_pcb + 2];
SP = [new_pcb + 3];
R0 = [new_pcb + 7];
R1 = [new_pcb + 8];
R2 = [new_pcb + 9];
R3 = [new_pcb + 10];
R4 = [new_pcb + 11];
R5 = [new_pcb + 12];
R6 = [new_pcb + 13];
R7 = [new_pcb + 14];
PTBR = [new_pcb + 5];
PTLR = [new_pcb + 6];

SP = SP + 1;

alias newphysicalSP S7;
newphysicalSP = ([PTBR + 2 * (SP / 512) ] * 512) + (SP % 512);
[newphysicalSP] = [new_pcb + 4];
[new_pcb+1] = 2;

ireturn;


